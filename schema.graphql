directive @aws_subscribe(mutations: [String!]!) on FIELD_DEFINITION
directive @aws_cognito_user_pools(cognito_groups: [String]) on OBJECT | FIELD_DEFINITION
directive @aws_api_key on OBJECT | FIELD_DEFINITION

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Subscription {
  addedPost: Post @aws_subscribe(mutations: ["createPost", "updatePost"])
}

scalar AWSDateTime
scalar AWSJSON

type Response @aws_api_key @aws_cognito_user_pools {
  _id: ID
  count: Int
  formId: ID
  appId: ID
  parentResponseId: ID
  workflowId: ID
  values: [Value]
  options: AWSJSON
  createdBy: Response
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Form @aws_api_key @aws_cognito_user_pools {
  _id: ID!
  name: String
  slug: String
  fields: [Field2]
  settings: AWSJSON
  published: Boolean
  createdBy: Response
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Field2 @aws_api_key @aws_cognito_user_pools {
  _id: ID
  label: String
  fieldType: String
  options: AWSJSON
  template: Template
  form: Form
}

type Template @aws_api_key @aws_cognito_user_pools {
  _id: ID
  title: String
  slug: String
  description: String
  media: [Media]
  fields: [Field2]
  active: Boolean
  inUse: Boolean
  showInMenu: Boolean
  options: AWSJSON
  createdAt: AWSDateTime
  createdBy: Response
}

type Value @aws_api_key @aws_cognito_user_pools {
  _id: ID
  field: String
  value: String
  valueNumber: Float
  valueBoolean: Boolean
  valueDate: AWSDateTime
  media: [Media]
  values: [String]
  template: Template
  page: Page
  form: Form
  response: Response
  options: AWSJSON
}

type Page @aws_api_key @aws_cognito_user_pools {
  _id: ID
  title: String
  slug: String
  authenticateUser: Boolean
  description: String
  active: Boolean
  media: [Media]
  fields: [Field2]
  template: Template
  options: AWSJSON
  createdBy: User
  createdAt: AWSDateTime
  values: [Value]
}

type Query {
  getUsers(
    page: Int
    limit: Int
    search: String
    lowerRange: AWSDateTime
    higherRange: AWSDateTime
    sortBy: String
    active: Boolean
  ): UserSearch @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  getUser(_id: ID!): User @aws_api_key @aws_cognito_user_pools
  getUserByCognitoUserId(userId: String!): User
  getPosts(page: Int, limit: Int, sortBy: String, search: String): Posts
  getMyPosts(page: Int, limit: Int, sortBy: String, search: String): Posts
  getPostsByUserId(userId: ID!, page: Int, limit: Int, sortBy: String, search: String): Posts
    @aws_api_key
    @aws_cognito_user_pools
  getPost(_id: ID!): Post
  getMyBookmarks(page: Int, limit: Int, sortBy: String, search: String): Bookmarks
  getBookmark(_id: ID!): Bookmark
}

type Mutation {
  createUser(userId: String!, name: String!, email: String!, picture: String): User
    @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  updateUser(
    userId: String!
    updatedBy: String!
    name: String
    email: String
    picture: String
  ): User
  updateUserStatus(userId: String!, updatedBy: String!, status: Boolean!): User
    @aws_cognito_user_pools(cognito_groups: ["superadmin"])
  createPost(body: String!, media: [MediaInput]): Post
  updatePost(_id: ID!, body: String, media: [MediaInput]): Post
  deletePost(_id: ID!): Boolean
  createBookmark(parentId: String, bookmark: String!): Bookmark
  updateBookmark(_id: ID!, parentId: String, bookmark: String): Bookmark
  deleteBookmark(_id: ID!): Boolean
}

type Bookmarks {
  data: [Bookmark]
  count: Int
}

type Bookmark {
  _id: ID
  parentId: String
  bookmark: String
  createdBy: ID
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type Logo {
  _id: ID
  logo: String
  description: String
}

type Posts @aws_api_key @aws_cognito_user_pools {
  data: [Post]
  count: Int
}

type Tags @aws_api_key @aws_cognito_user_pools {
  tag: Page
}

type Media @aws_api_key @aws_cognito_user_pools {
  url: String
  caption: String
}

type Post @aws_api_key @aws_cognito_user_pools {
  _id: ID
  body: String
  media: [Media]
  tags: [Tags]
  createdBy: User
  updatedBy: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

input MediaInput {
  url: String
  caption: String
}

type UserSearch @aws_cognito_user_pools(cognito_groups: ["superadmin"]) {
  users: [User]
  count: Int
}

type User @aws_api_key @aws_cognito_user_pools {
  _id: ID!
  userId: String!
  name: String!
  email: String!
  picture: String
  active: Boolean!
  confirmed: Boolean!
  createdAt: String
  createdBy: String
  updatedAt: String
  updatedBy: String
}
